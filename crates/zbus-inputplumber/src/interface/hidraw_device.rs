//! # D-Bus interface proxy for: `org.shadowblip.Input.Source.HIDRawDevice`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `org.shadowblip.Input.Source.HIDRawDevice.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(
    interface = "org.shadowblip.Input.Source.HIDRawDevice",
    assume_defaults = true
)]
pub trait HIDRawDevice {
    /// InterfaceNumber property
    #[zbus(property)]
    fn interface_number(&self) -> zbus::Result<i32>;

    /// Manufacturer property
    #[zbus(property)]
    fn manufacturer(&self) -> zbus::Result<String>;

    /// Path property
    #[zbus(property)]
    fn path(&self) -> zbus::Result<String>;

    /// Product property
    #[zbus(property)]
    fn product(&self) -> zbus::Result<String>;

    /// ProductId property
    #[zbus(property)]
    fn product_id(&self) -> zbus::Result<String>;

    /// ReleaseNumber property
    #[zbus(property)]
    fn release_number(&self) -> zbus::Result<String>;

    /// SerialNumber property
    #[zbus(property)]
    fn serial_number(&self) -> zbus::Result<String>;

    /// VendorId property
    #[zbus(property)]
    fn vendor_id(&self) -> zbus::Result<String>;
}
