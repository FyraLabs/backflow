//! # D-Bus interface proxy for: `org.shadowblip.InputManager`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `org.shadowblip.Input.Manager.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;
#[proxy(interface = "org.shadowblip.InputManager", assume_defaults = true)]
pub trait InputManager {
    /// AttachTargetDevice method
    fn attach_target_device(&self, target_path: &str, composite_path: &str) -> zbus::Result<()>;

    /// CreateCompositeDevice method
    fn create_composite_device(&self, config_path: &str) -> zbus::Result<String>;

    /// CreateTargetDevice method
    fn create_target_device(&self, kind: &str) -> zbus::Result<String>;

    /// HookSleep method
    fn hook_sleep(&self) -> zbus::Result<()>;

    /// HookWake method
    fn hook_wake(&self) -> zbus::Result<()>;

    /// StopTargetDevice method
    fn stop_target_device(&self, path: &str) -> zbus::Result<()>;

    /// GamepadOrder property
    #[zbus(property)]
    fn gamepad_order(&self) -> zbus::Result<Vec<String>>;
    #[zbus(property)]
    fn set_gamepad_order(&self, value: &[&str]) -> zbus::Result<()>;

    /// ManageAllDevices property
    #[zbus(property)]
    fn manage_all_devices(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_manage_all_devices(&self, value: bool) -> zbus::Result<()>;

    /// SupportedTargetDeviceIds property
    #[zbus(property)]
    fn supported_target_device_ids(&self) -> zbus::Result<Vec<String>>;

    /// SupportedTargetDevices property
    #[zbus(property)]
    fn supported_target_devices(&self) -> zbus::Result<Vec<String>>;

    /// Version property
    #[zbus(property)]
    fn version(&self) -> zbus::Result<String>;
}
