
<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>
  <interface name="org.shadowblip.Input.Source.UdevDevice">
    <!--
     Returns the full device node path to the device (e.g. /dev/input/event3)
     -->
    <property name="DevicePath" type="s" access="read"/>
    <!--
     Returns the bus type of the device
     -->
    <property name="IdBustype" type="s" access="read"/>
    <!--
     Returns the product id of the device
     -->
    <property name="IdProduct" type="s" access="read"/>
    <!--
     Returns the vendor id of the device
     -->
    <property name="IdVendor" type="s" access="read"/>
    <!--
     Returns the version id of the device
     -->
    <property name="IdVersion" type="s" access="read"/>
    <!--
     Returns the human readable name of the device (e.g. XBox 360 Pad)
     -->
    <property name="Name" type="s" access="read"/>
    <!--
     Returns the phys_path of the device (e.g usb-0000:07:00.3-2/input0)
     -->
    <property name="PhysPath" type="s" access="read"/>
    <!--
     Returns the udev device properties of the device
     -->
    <property name="Properties" type="a{ss}" access="read"/>
    <!--
     Returns the subsystem that the device belongs to. E.g. "input", "hidraw"
     -->
    <property name="Subsystem" type="s" access="read"/>
    <!--
     Returns the full sysfs path of the device (e.g. /sys/devices/pci0000:00)
     -->
    <property name="SysfsPath" type="s" access="read"/>
    <!--
     Returns the uniq of the device
     -->
    <property name="UniqueId" type="s" access="read"/>
  </interface>
  <interface name="org.freedesktop.DBus.Peer">
    <method name="Ping">
    </method>
    <method name="GetMachineId">
      <arg type="s" direction="out"/>
    </method>
  </interface>
  <interface name="org.shadowblip.Input.Source.EventDevice">
    <!--
     Returns the detected device class of the device (e.g. "joystick", "touchscreen", etc.)
     -->
    <property name="DeviceClass" type="s" access="read"/>
    <!--
     Returns the full device node path to the device (e.g. /dev/input/event3)
     -->
    <property name="DevicePath" type="s" access="read"/>
    <!--
     Returns the bus type of the device
     -->
    <property name="IdBustype" type="s" access="read"/>
    <!--
     Returns the product id of the device
     -->
    <property name="IdProduct" type="s" access="read"/>
    <!--
     Returns the vendor id of the device
     -->
    <property name="IdVendor" type="s" access="read"/>
    <!--
     Returns the version id of the device
     -->
    <property name="IdVersion" type="s" access="read"/>
    <!--
     Returns the human readable name of the device (e.g. XBox 360 Pad)
     -->
    <property name="Name" type="s" access="read"/>
    <!--
     Returns the phys_path of the device (e.g usb-0000:07:00.3-2/input0)
     -->
    <property name="PhysPath" type="s" access="read"/>
    <!--
     Returns the set of supported "absolute axes" reported by the device.

     These are most typically supported by joysticks and touchpads.
     -->
    <property name="SupportedAbsoluteAxes" type="aq" access="read"/>
    <!--
     Returns the set of supported force feedback effects supported by a device.
     -->
    <property name="SupportedFf" type="aq" access="read"/>
    <!--
     Returns the set of supported keys reported by the device.

     For keyboards, this is the set of all possible keycodes the keyboard may emit. Controllers,
     mice, and other peripherals may also report buttons as keys.
     -->
    <property name="SupportedKeys" type="aq" access="read"/>
    <!--
     Returns a set of supported LEDs on the device.

     Most commonly these are state indicator lights for things like Scroll Lock, but they
     can also be found in cameras and other devices.
     -->
    <property name="SupportedLeds" type="aq" access="read"/>
    <!--
     Returns the set of supported "relative axes" reported by the device.

     Standard mice will generally report `REL_X` and `REL_Y` along with wheel if supported.
     -->
    <property name="SupportedRelativeAxes" type="aq" access="read"/>
    <!--
     Returns the set of supported simple sounds supported by a device.

     You can use these to make really annoying beep sounds come from an internal self-test
     speaker, for instance.
     -->
    <property name="SupportedSounds" type="aq" access="read"/>
    <!--
     Returns the set of supported switches reported by the device.

     These are typically used for things like software switches on laptop lids (which the
     system reacts to by suspending or locking), or virtual switches to indicate whether a
     headphone jack is plugged in (used to disable external speakers).
     -->
    <property name="SupportedSwitches" type="aq" access="read"/>
    <!--
     Returns the full sysfs path of the device (e.g. /sys/devices/pci0000:00)
     -->
    <property name="SysfsPath" type="s" access="read"/>
    <!--
     Returns the uniq of the device
     -->
    <property name="UniqueId" type="s" access="read"/>
  </interface>
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg type="s" direction="out"/>
    </method>
  </interface>
  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg name="interface_name" type="s" direction="in"/>
      <arg name="property_name" type="s" direction="in"/>
      <arg type="v" direction="out"/>
    </method>
    <method name="Set">
      <arg name="interface_name" type="s" direction="in"/>
      <arg name="property_name" type="s" direction="in"/>
      <arg name="value" type="v" direction="in"/>
    </method>
    <method name="GetAll">
      <arg name="interface_name" type="s" direction="in"/>
      <arg type="a{sv}" direction="out"/>
    </method>
    <signal name="PropertiesChanged">
      <arg name="interface_name" type="s"/>
      <arg name="changed_properties" type="a{sv}"/>
      <arg name="invalidated_properties" type="as"/>
    </signal>
  </interface>
</node>
